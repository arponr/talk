// Generated by CoffeeScript 1.7.1
(function() {
  var bottom, create, fmtTime, fmtTimes, load, loginLoad, mainLoad, mathjax, prezero, printDate, printTime, rootLoad, scroll, threadLoad, websocket;

  create = function(tag) {
    return $(document.createElement(tag));
  };

  bottom = function(el) {
    return el[0].scrollHeight - el[0].offsetHeight;
  };

  scroll = function(el) {
    return el.scrollTop(bottom(el));
  };

  mathjax = function(el) {
    return MathJax.Hub.Queue(["Typeset", MathJax.Hub, el[0]]);
  };

  prezero = function(x) {
    if (x < 10) {
      return "0" + x;
    } else {
      return x;
    }
  };

  printDate = function(t) {
    var d, m, y;
    y = t.getFullYear();
    m = prezero(t.getMonth() + 1);
    d = prezero(t.getDate());
    return "" + y + "-" + m + "-" + d;
  };

  printTime = function(t) {
    var h, m, p;
    h = t.getHours();
    m = prezero(t.getMinutes());
    p = "am";
    if (h === 0) {
      h = 12;
    } else if (h > 12) {
      h -= 12;
      p = "pm";
    }
    return "" + h + ":" + m + p;
  };

  fmtTime = function(time, fmt) {
    var d, dt, t;
    dt = new Date(time.attr("datetime"));
    d = printDate(dt);
    t = printTime(dt);
    return time.html(fmt.replace("d", d).replace("t", t));
  };

  fmtTimes = function(el, fmt) {
    return el.find("time").each(function() {
      return fmtTime($(this), fmt);
    });
  };

  websocket = function(url) {
    if (url[0] === '/') {
      url = location.origin + url;
    }
    return new WebSocket(url.replace(/^http/, "ws").replace("thread", "socket"));
  };

  threadLoad = function() {
    var bodySwitch, down, fmt, hidePreview, input, markdown, msgs, onsend, preview, previewContent, send, socket, tex;
    mainLoad();
    msgs = $("#msgs");
    MathJax.Hub.Register.StartupHook("End", function() {
      return scroll(msgs);
    });
    fmt = "d, t";
    fmtTimes($("#right"), fmt);
    bodySwitch = function() {
      return $(this).closest(".msg").find(".body").toggle();
    };
    msgs.find(".body_switch").click(bodySwitch);
    socket = websocket(location.href);
    socket.onmessage = function(e) {
      var aside, atBottom, fmtBody, m, msg, rawBody, time, username;
      m = JSON.parse(e.data);
      username = create("div").addClass("username").html("" + m.Username);
      fmtBody = create("div").addClass("body fmt" + (m.Tex ? " math" : void 0)).html(m.FmtBody);
      time = create("time").attr({
        datetime: m.Time
      });
      fmtTime(time, fmt);
      aside = create("div").addClass("aside").append(time);
      msg = create("div").addClass("msg").append([aside, username, fmtBody]);
      if (m.Markdown || m.Tex) {
        rawBody = create("div").addClass("body raw").html(m.RawBody);
        fmtBody.before(rawBody);
        time.addClass("body_switch").click(bodySwitch);
      }
      if (m.Tex) {
        mathjax(fmtBody);
      }
      atBottom = msgs.scrollTop() === bottom(msgs);
      msgs.append(msg);
      if (atBottom) {
        return MathJax.Hub.Queue(function() {
          return scroll(msgs);
        });
      }
    };
    markdown = $("#markdown");
    tex = $("#tex");
    input = $("#input");
    send = $("#send");
    preview = $("#preview");
    previewContent = $("#preview_content");
    down = $("#downicon");
    hidePreview = function() {
      var atBottom;
      atBottom = msgs.scrollTop() === bottom(msgs);
      previewContent.html("");
      down.hide(150);
      previewContent.animate({
        bottom: "30px"
      }, 150);
      return msgs.animate({
        bottom: "140px",
        scrollTop: msgs.scrollTop() - 100
      }, 150, MathJax.Hub.Queue(function() {
        if (atBottom) {
          return scroll(msgs);
        }
      }));
    };
    onsend = function() {
      var m;
      m = {
        "RawBody": input.val(),
        "Markdown": markdown.is(":checked"),
        "Tex": tex.is(":checked")
      };
      input.val("");
      socket.send(JSON.stringify(m));
      if (previewContent.css("bottom") === "120px") {
        return hidePreview();
      }
    };
    input.keydown(function(e) {
      if (e.shiftKey && e.keyCode === 13) {
        onsend();
        return e.preventDefault();
      }
    });
    send.click(onsend);
    preview.click(function() {
      var m, mdCheck, texCheck;
      mdCheck = markdown.is(":checked");
      texCheck = tex.is(":checked");
      m = {
        "raw": input.val(),
        "markdown": mdCheck ? "md" : "",
        "tex": texCheck ? "tex" : ""
      };
      return previewContent.load("/preview", m, function() {
        if (texCheck) {
          mathjax(previewContent);
        }
        if (previewContent.css("bottom") === "30px") {
          down.show(150);
          previewContent.animate({
            bottom: "120px"
          }, 150);
          return msgs.animate({
            bottom: "240px",
            scrollTop: msgs.scrollTop() + 100
          }, 150);
        }
      });
    });
    return down.click(hidePreview);
  };

  rootLoad = function() {
    return mainLoad();
  };

  mainLoad = function() {
    var fmt, left, logo, newthread, right, threads;
    MathJax.Hub.Config({
      tex2jax: {
        inlineMath: [['$', '$']],
        processClass: "math",
        ignoreClass: "nomath"
      },
      "HTML-CSS": {
        scale: 95,
        availableFonts: [],
        webFont: "Gyre-Termes"
      }
    });
    newthread = $("#newthread");
    $("#addthread").click(function() {
      if (newthread.is(":visible")) {
        return newthread.slideUp(150);
      } else {
        newthread.slideDown(150);
        return newthread.children(":first").focus();
      }
    });
    left = $("#left");
    fmt = "d<br>t";
    fmtTimes(left, fmt);
    threads = $("#threads");
    threads.children().each(function() {
      var lastmsg, socket, thread, time;
      thread = $(this);
      socket = websocket(thread.attr("href"));
      lastmsg = thread.find(".lastmsg").first();
      time = thread.find("time").first();
      return socket.onmessage = function(e) {
        var m;
        m = JSON.parse(e.data);
        lastmsg.html("" + m.Username + ": " + m.FmtBody);
        time.attr({
          datetime: m.Time
        });
        fmtTime(time, fmt);
        return thread.prependTo(threads);
      };
    });
    logo = $("#logo");
    right = $("#right_wrap");
    return logo.click(function() {
      if (left.css("left") === "0px") {
        left.animate({
          left: "-260px"
        }, 150);
        return right.animate({
          left: "0px"
        }, 150);
      } else {
        left.animate({
          left: "0"
        }, 150);
        return right.animate({
          left: "260px"
        }, 150);
      }
    });
  };

  loginLoad = function() {
    var again, login, submit, sw;
    sw = $("#switch");
    login = $("#login");
    submit = $("#submit");
    again = $("#again");
    return sw.click(function() {
      if (again.is(":visible")) {
        submit.val("login");
        login.attr({
          action: "/login"
        });
        sw.val("need to register?");
        return again.hide();
      } else {
        submit.val("register");
        login.attr({
          action: "/register"
        });
        sw.val("already have an account?");
        return again.show();
      }
    });
  };

  load = {
    "loginpage": loginLoad,
    "rootpage": rootLoad,
    "threadpage": threadLoad
  };

  jQuery(function() {
    return load[this.body.id]();
  });

}).call(this);
